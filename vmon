#!/bin/bash

user=($(who))
configDir="/home/${user[0]}/.vmon"
resolutionFile="/home/${user[0]}/.vmon/resolution.conf"
userConfFile="/home/${user[0]}/.vmon/vmon.conf"

function vmonitor-help () {
    echo "Virtual monitor - easy virtual monitor setup tool"
    echo "USAGE : vmon [setup] [enable] [disable] [help]"
    echo -e "\t help\t: Display help."
    echo -e "\t setup\t: Setup profile for virtual monitor.Need to execute each time X server start."
    echo -e "\t enable\t: Enable virtual monitor."
    echo -e "\t disable: Disable virtual monitor."
}

function writeConfig () {
    if [ ! -d "$configDir" ]; then
        mkdir $configDir
    fi

    if [ -f $userConfFile ]; then
        rm $userConfFile
    fi

    touch $userConfFile
    echo "defaultDisplay=\"\"" >> $userConfFile
    echo "defaultResolution=\"\"" >> $userConfFile
    chmod 775 $userConfFile
}

function writeProfile () {
    if [ ! -d "$configDir" ]; then
        mkdir $configDir
    fi

    if [ -f $resolutionFile ]; then
        rm $resolutionFile
    fi

    touch $resolutionFile
    echo "600x960" >> $resolutionFile
    echo "720x1080" >> $resolutionFile
    echo "768x1024" >> $resolutionFile
    echo "768x1366" >> $resolutionFile
    echo "800x1080" >> $resolutionFile
    echo "850x1280" >> $resolutionFile
    echo "960x600" >> $resolutionFile
    echo "1024x768" >> $resolutionFile
    echo "1024x1366" >> $resolutionFile
    echo "1080x1920" >> $resolutionFile
    echo "1200x1920" >> $resolutionFile
    echo "1280x720" >> $resolutionFile
    echo "1280x800" >> $resolutionFile
    echo "1280x850" >> $resolutionFile
    echo "1366x768" >> $resolutionFile
    echo "1366x1024" >> $resolutionFile
    echo "1920x1080" >> $resolutionFile
    echo "1920x1200" >> $resolutionFile
    chmod 775 $resolutionFile
}


# read resolution config file
if [ ! -f "$resolutionFile" ]; then
    echo "Warning : Cannot read config file!"
    echo "A template will be written to $resolutionFile ."
    writeProfile
fi
resolution=($(grep "x" $resolutionFile))
width=($(grep -oP "\d+x" $resolutionFile | grep -oP "\d+"))
height=($(grep -oP "x\d+" $resolutionFile | grep -oP "\d+"))
resCount=$(grep -c "x" $resolutionFile)
resCount=`expr $resCount - 1` 

# read user config file
if [ ! -f "$userConfFile" ]; then
    echo "Warning : Cannot read config file!"
    echo "A template will be written to $userConfFile ."
    writeConfig
fi

defaultDisplay=$(grep "^defaultDisplay" $userConfFile | grep -oP "\".+\"" | tr --delete \")
defaultResolution=$(grep "^defaultResolution" $userConfFile | grep -oP "\".+\"" | tr --delete \")


# calc modeline with gtf
modeline[0]=""
modename[0]=""
for i in $(seq 0 $resCount)
do
    modeline[$i]=$(gtf ${width[$i]} ${height[$i]} 60 | grep -oP "\".+"  | tr --delete \")
    modename[$i]=$(gtf ${width[$i]} ${height[$i]} 60 | grep -oP "\".+" | grep -oP '"\K[^"\047]+(?=["\047])')
done

# check for valid config 
invalidDisplay="true"
displayName=($(xrandr | grep -oP ".+\sconnected" | sed 's/ connected.*//'))
for i in "${displayName[@]}"
do
    if [ "$i" == "$defaultDisplay" ]; then
        invalidDisplay="false"
        break
    fi
done
if [ "$invalidDisplay" == "true" ]; then
    defaultDisplay=$(xrandr | grep -oP ".+\sconnected" | head -1 | sed 's/ connected.*//')
    echo "Warning : invalid defaultDisplay , use $defaultDisplay as default display."
fi


invalidResolution="true"
for i in "${modename[@]}"
do
    if [ "$i" == "$defaultResolution" ]; then
        invalidResolution="false"
        break
    fi
done
if [ "$invalidResolution" == "true" ]; then
    echo "Warning : invalid defaultResolution , use ${modename[0]} as default resolution."
    defaultResolution=${modename[0]}
fi


# arg 
if [ -z "$1" ]; then
    vmonitor-help
    echo "Error : Too few arguments!"
    exit 0
fi
if [ $# -gt 1 ]; then
    echo "Error : Too much arguments!"
    exit 1
fi

if [ "$1" = "setup" ]; then
    # loop
    for i in $(seq 0 $resCount)
    do
        echo "Adding proflie for ${width[$i]} x ${height[$i]}"
        #echo "modeline = $modeline"
        #echo "modename = $modename"
        xrandr --newmode ${modeline[$i]}
        xrandr --addmode VIRTUAL1 ${modename[$i]}
    done
    xrandr --output VIRTUAL1 --off
    exit 0
fi

if [ "$1" = "enable" ]; then
    #echo "Enable VIRTUAL1 with mode $defaultResolution --primary --right-of $defaultDisplay "
    #xrandr --output VIRTUAL1 --mode $defaultResolution --primary --right-of $defaultDisplay
    echo "Enable VIRTUAL1 with mode $defaultResolution --right-of $defaultDisplay "
    xrandr --output VIRTUAL1 --mode $defaultResolution --right-of $defaultDisplay
    exit 0
fi

if [ "$1" = "disable" ]; then
    echo "VIRTUAL1 is disabled"
    xrandr --output VIRTUAL1 --off
    exit 0
fi

if [ "$1" = "help" ]; then
    vmonitor-help
    exit 0
fi

echo -e "Error : Unknown argument \"$1\" !"
exit 1

# --------------------------------



